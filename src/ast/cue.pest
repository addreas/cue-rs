// https://cuelang.org/docs/references/spec/
// https://review.gerrithub.io/c/cue-lang/cue/+/540569/3/doc/ref/spec.md#458
// "Production names starting with an uppercase Unicode letter denote non-terminal productions (i.e., productions which allow white-space and comments between tokens); all other production names denote lexical productions."
// https://pest.rs/book/grammars/syntax.html#atomic

newline        = { "\u{000A}" }
unicode_char   = { !newline ~ ANY }
unicode_letter = _{ LETTER }
unicode_digit  = _{ DECIMAL_NUMBER }

letter        = _{ unicode_letter | "_" | "$" }
decimal_digit = _{ '0'..'9' }
binary_digit  = _{ '0'..'1' }
octal_digit   = _{ '0'..'7' }
hex_digit     = _{ '0'..'9' | 'A'..'F' | 'a'..'f' }

identifier = @{ ("#" | "_#")? ~ letter ~ (letter | unicode_digit)* }

decimal_lit = @{ "0" | ("-"? ~ '1'..'9' ~ ( "_"? ~ decimal_digit )*) }
fraction    = @{ decimal_digit ~ ( "_"? ~ decimal_digit )* }
si_lit      = ${ (decimal_lit ~ ("." ~  fraction)? ~ multiplier)
               | ("." ~ fraction ~  multiplier)
               }
binary_lit  = @{ "0b" ~ binary_digit ~ ( "_"? ~ binary_digit )* }
octal_lit   = @{ "0o" ~ octal_digit ~ ( "_"? ~ octal_digit )* }
hex_lit     = @{ "0" ~ ( "x" | "X" ) ~ hex_digit ~ ("_"? ~ hex_digit )* }
multiplier  = @{ ("K" | "M" | "G" | "T" | "P" ) ~ "i"? }
exponent    = ${ ("e" | "E") ~ decimal_lit}

int_lit     = ${ decimal_lit | octal_lit | binary_lit | hex_lit }
float_lit   = ${ ( decimal_lit ~ ("." ~ fraction) ~ exponent? )
               | ( decimal_lit ~ exponent )
               | ( "." ~ fraction ~ exponent? )
               }

escape_sequence  = @{ "\\" ~ PEEK[0..1] }
escaped_char     = ${ escape_sequence ~ ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "/" | "\\" | "'" | "\"" ) }
octal_byte_value = ${ escape_sequence ~ octal_digit{3} }
hex_byte_value   = ${ escape_sequence ~ "x" ~ hex_digit{2} }
little_u_value   = ${ escape_sequence ~ "u" ~ hex_digit{4} }
big_u_value      = ${ escape_sequence ~ "U" ~ hex_digit{8} }
Interpolation    = !{ escape_sequence ~ "(" ~ nl ~ Expression ~ ")" }
unicode_value    = ${ little_u_value | big_u_value | escaped_char | !PEEK_ALL ~ unicode_char  }
byte_value       = ${ octal_byte_value | hex_byte_value }
ending_indent    = @{ (" " | "\t")* }

string_lit = { PUSH("#"*) ~
                          ( multiline_string_lit
                          | simple_string_lit
                          | multiline_bytes_lit
                          | simple_bytes_lit
                          )
             ~ POP
             }

simple_string_lit    = ${ PUSH("\"") ~ ( Interpolation | unicode_value )* ~ POP }
simple_bytes_lit     = ${ PUSH("'")  ~ ( Interpolation | unicode_value | byte_value )* ~ POP }
multiline_string_lit = ${ PUSH("\"\"\"")
                        ~ "\n" // literal "\n" to differentiate from `newline` inside of the string
                        ~ ( !("\n" ~ ending_indent ~ PEEK) ~ (Interpolation | unicode_value | newline) )*
                        ~ "\n" ~ ending_indent ~ POP
                        }
multiline_bytes_lit  = ${ PUSH("'''")
                        ~ "\n" // literal "\n" to differentiate from `newline` inside of the string
                        ~ ( !("\n" ~ ending_indent ~ PEEK) ~ (Interpolation | unicode_value | byte_value | newline) )*
                        ~ "\n" ~ ending_indent ~ POP
                        }

bottom_lit = { "_|_" }
null_lit   = { "null" }
bool_lit   = { "true" | "false" }

StructLit       = { "{" ~ nl ~ ( Declaration ~ nlc ~ nl )* ~ Declaration? ~ nlc? ~ nl ~ "}" }
Declaration     = { LetClause | Field | Ellipsis | Embedding | attribute }
Ellipsis        = { "..." ~ Expression? }
Embedding       = { Comprehension | AliasExpr }
Field           = { Labels ~ nl ~ AliasExpr ~ attribute* }
Labels          = { ( Label ~ nl ~ ":" ~ nl )+ }
Label           = { ( identifier ~ !(equal_op) ~ "=" )? ~ nl ~ LabelExpr ~ nl }
LabelExpr       = { ( LabelName ~ ("?" | "!")? )
                  | ( "[" ~ nl ~ AliasExpr ~ nl ~ "]" )
                  | ( "(" ~ nl ~ Expression ~ nl ~ ")" ~ ("?" | "!")? )
                  }
LabelName       = { identifier | simple_string_lit  }

attribute       = { "@" ~ identifier ~ "(" ~ attr_tokens ~ ")" }
attr_tokens     = { ( attr_token
                     | ( "(" ~ attr_tokens ~ ")" )
                     | ( "[" ~ attr_tokens ~ "]" )
                     | ( "{" ~ attr_tokens ~ "}" )
                     )* }
attr_token      = { !( "(" | ")" | "[" | "]" | "{" | "}" ) ~ ANY }

AliasExpr  = { ( identifier ~ !(equal_op) ~ "=" )? ~ nl ~ Expression } // TODO: could the grammar be tweaked to not require that !(equal_op)?

ListLit       = { "[" ~ nl ~ ( ElementList ~ nl ~ ","? )? ~ nl ~ "]" }
ElementList   = { Ellipsis | ( Embedding ~ ( nl ~ "," ~ nl ~ Embedding )* ~ ( nl ~ "," ~ nl ~ Ellipsis )? ) }

Literal     = { BasicLit | ListLit | StructLit }

BasicLit    = { si_lit | float_lit | int_lit | string_lit | null_lit | bool_lit | bottom_lit }
OperandName = { identifier | QualifiedIdent }

QualifiedIdent = { PackageName ~ "." ~ identifier }

Selector       = { "." ~ ( identifier | simple_string_lit ) }
Index          = { "[" ~ nl ~ Expression ~ nl ~ "]" }
Slice          = { "[" ~ nl ~ slice_low? ~ nl ~ ":" ~ nl ~ slice_high? ~ nl ~ "]" }
slice_low      = { Expression }
slice_high     = { Expression }
Argument       = { Expression }
Arguments      = { "(" ~ nl ~ ( ( Argument ~ ( nlc ~ Argument )* ) ~ nlc? )? ~ nl ~ ")" }

Expression = { prefix* ~ primary ~ postfix* ~ (infix ~ nl ~ prefix* ~ primary ~ postfix* )* }

infix    =  _{ or_op | and_op | disjunct_op | conjuct_op | equal_op | rel_op | add_op | mul_op }
prefix   =  _{ unary_rel_op | unary_add_op | not_op | default_op }
postfix  =  _{ Selector | Index | Slice | Arguments }
primary  =  _{ Literal | OperandName | ( "(" ~ nl ~ Expression ~ nl ~ ")" ) }

disjunct_op  = { "|" }
conjuct_op   = { "&" }
or_op        = { "||" }
and_op       = { "&&" }
equal_op     = { "==" }
rel_op       = { "!=" | "=~" | "!~" | "<=" | ">=" | "<" | ">" }
unary_rel_op = { "!=" | "=~" | "!~" | "<=" | ">=" | "<" | ">" }
add_op       = { "+" | "-" }
unary_add_op = { "+" | "-" }
mul_op       = { "*" | "/" | "div" | "mod" | "quo" | "rem" }
default_op   = { "*" }
not_op       = { "!" }

Comprehension = { Clauses ~ StructLit }

Clauses       = { StartClause ~ ( nlc? ~ Clause )* }
StartClause   = { ForClause | GuardClause }
Clause        = { StartClause | LetClause }
ForClause     = { "for" ~ identifier ~ ( "," ~ identifier )? ~ "in" ~ Expression }
GuardClause   = { "if" ~ Expression }
LetClause     = { "let" ~ identifier ~ "=" ~ Expression }

PackageClause = { "package" ~ PackageName }
PackageName   = { identifier }

ImportDecl     = { "import" ~ ( ImportSpec | ("(" ~ nl ~ ImportSpec* ~ nl ~ ")") ) }
ImportSpec     = { PackageName? ~ ImportPath ~ nlc }
ImportLocation = { unicode_value* }
ImportPath     = { PUSH("\"") ~ ImportLocation ~ (":" ~ identifier)? ~ POP }

SourceFile = { SOI
             ~ (attribute ~ nlc ~ nl)*
             ~ (PackageClause ~ nlc ~ nl)?
             ~ (ImportDecl ~ nlc ~ nl)*
             ~ (Declaration ~ nlc ~ nl)*
             ~ Declaration?
             ~ EOI
             }

nl  = _{ "\n"* }
nlc = _{ (nl ~ ",") | "\n" | "," }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!newline ~ ANY)* } // TODO: dont hide comments
